spring:
  application:
    name: TravelLight

  # 데이터베이스 설정
  datasource:
    url: jdbc:postgresql://localhost:5432/travellight
    username: postgres
    password: tmdals
    driver-class-name: org.postgresql.Driver

  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # 이메일 설정
  mail:
    enabled: true
    host: smtp.gmail.com
    port: 587
    username: haveagoodtrip.travellight@gmail.com
    password: cnyg lbpx ruvw tskl
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.gmail.com
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

  # 날짜/시간 설정
  jackson:
    date-format: yyyy-MM-dd
    time-zone: Asia/Seoul

  # 파일 업로드 설정
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  # 메시지 설정
  messages:
    basename: messages
    encoding: UTF-8

  # Redis 캐싱 설정
  data:
    redis:
      url: redis://${REDIS_HOST:localhost}:${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

# 서버 포트 설정
server:
  port: 8080

# 로깅 설정
logging:
  level:
    org.springframework.security: DEBUG
    org.example.travellight: DEBUG

# Naver Maps API
naver:
  maps:
    client:
      id: r23gqqq271
      secret: nCrtgfs2DRdDzKV3bqYDM8djDxPIEJEUyZ6Hv7b4

# Google Gemini API 설정
gemini:
  model:
    name: ${GEMINI_MODEL_NAME:gemini-2.0-flash-exp}

# Swagger 설정
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
  api-docs:
    path: /api-docs
  packages-to-scan: org.example.travellight.controller
  paths-to-match: /**

# 포트원 V2 설정
portone:
  secret:
    api: ${PORTONE_API_SECRET:EUna17acg6mJXjs30Jw8wthqoPd73ZKBkOqfnVGcIgrjOu5LeXvDqo91ltKHB0jBcqE7Ap2hdq8vSddZ}
    # webhook: ${PORTONE_WEBHOOK_SECRET:your_webhook_secret_here}  # 웹훅 비활성화

# JWT 설정
jwt:
  secret: 572fb1515fa3d3fcb3245a70d7aa01f2a782acacc957acaf7ad346bb659949bd
  secure: false
  access-token:
    cookie-name: AT
    expiration: 600
  refresh-token:
    cookie-name: RT
    expiration: 40320000

# OAuth 설정
# 유정환 계정 (장기 운영 시 변경 필요)
oauth:
  google:
    client-id: ${GOOGLE_CLIENT_ID:735762277920-tg4beceni06gador3r06mhr9e0hmdm7m.apps.googleusercontent.com}
    client-secret: ${GOOGLE_CLIENT_SECRET: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}
    redirect-uri: ${GOOGLE_REDIRECT_URI:/auth/callback/google}
    token-uri: https://oauth2.googleapis.com/token
    user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo
  kakao:
    client-id: ${KAKAO_CLIENT_ID:40dcf273a992147fe5ee6b102ee0b823}
    client-secret: ${KAKAO_CLIENT_SECRET:5XiivyiZvc4VEg4qL0Uoj6uU8hE7TFk2}
    redirect-uri: ${KAKAO_REDIRECT_URI:/auth/callback/kakao}
    token-uri: https://kauth.kakao.com/oauth/token
    user-info-uri: https://kapi.kakao.com/v2/user/me
    # 카카오 이메일 권한은 비즈니스 등록 심사 필요하므로 개발 단계에서는 닉네임만 사용
    # scope: ${KAKAO_SCOPE:profile_nickname,account_email}
    scope: ${KAKAO_SCOPE:profile_nickname}